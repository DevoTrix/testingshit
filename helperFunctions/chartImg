const QuickChart = require('quickchart-js');
const {Pool} = require('pg');
const postgreConfig = {
    connectionString: process.env.POSTGRES_URL ,
  };
async function retrieveData(sn){
    var result;
    try{
        var pool = new Pool(postgreConfig);
        const con = await pool.connect();
        // offset is by # of hours in a day * #numer of minutes in an hour * number of seconds in a minute * number of millis in a second. then multiplied by the number of days.
        var offset = (24*60*60*1000) * 1;
        var threshold = new Date();
        threshold.setTime(threshold - offset);
        threshstring = threshold.toISOString();
        const query = "SELECT Data.pm25, Data.pm10, timestamp FROM Data, Devices WHERE Data.sn = Devices.sn AND Devices.sn = $1 AND timestamp > $2 ORDER BY timestamp";
        const value = [sn, threshstring];
        const queryResponse = await con.query(query, value);
        result = queryResponse.rows;
        return result;

    } catch(error){
        console.error("Error regarding Postgres: " + error);
        return null;
    }

}
// Define chart configuration
async function genChart(sn){
    try{
        var result = await retrieveData(sn);
        const chart = new QuickChart();
        chart
            .setConfig({
                type: 'line',
                data: {
                    labels: result.map(row=>row.timestamp),
                    datasets: [{
                        label: 'pm25',
                        data: result.map(row=>row.pm25),
                        borderColor: [
                            'red'
                        ],
                        borderWidth: 1
                    },
                    {
                        label: 'pm10',
                        data: result.map(row=>row.pm10),
                        borderColor:[
                            'blue'
                        ],
                        borderWidth: 1
                    }
                ]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            })
            .setWidth(200)
            .setHeight(300);

        // Get the chart URL as a base64 string
        var storage = ""
        const base64Image = chart.getShortUrl().then(url => {
            console.log(url);
            return url;
        });


    }catch(error){
        console.error(error);
    }
}

module.exports = genChart;